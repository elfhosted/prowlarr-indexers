id: elfeasynews
name: ElfEasynews
description: "A custom Prowlarr indexer for Easynews."
language: en-US
type: public
encoding: UTF-8
followredirect: false
testlinktorrent: false
requestDelay: 0
links:
  - http://elfhosted-internal.easynewsplus
caps:
  categories:
    Movies: Movies
    TV: TV
  modes:
    search: [q]
    movie-search: [q, imdbid]
    tv-search: [q, imdbid, season, ep]
  allowrawsearch: false
settings:
  - name: username
    type: text
    label: Easynews Username
    default: ""
  - name: password
    type: text
    label: Easynews Password
    default: ""
  - name: fakefileurl
    type: text
    label: Fake File URL
    default: "http://debridav:8000"
  - name: validate_imdb_movie
    type: text
    label: IMDB ID of Movie to use for Radarr validation (must exist in indexer)
    default: "tt0137523"
  - name: validate_imdb_tv
    type: text
    label: IMDB ID TV show to use for Sonarr validation (must exist in indexer)
    default: "tt9288030"
search:
  headers:
    User-Agent:
      [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0",
      ]
  paths:
    - path: /%7B"username":"{{ .Config.username }}","password":"{{ .Config.password }}","sort1":"Size","sort1Direction":"Descending","sort2":"Relevance","sort2Direction":"Descending","sort3":"Date%20&%20Time","sort3Direction":"Descending"%7D/stream/movie/{{ if .Query.IMDBID }}{{ .Query.IMDBID }}{{ else }}{{ .Config.validate_imdb_movie }}{{ end }}.json
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      categories: [Movies]

    - path: /%7B"username":"{{ .Config.username }}","password":"{{ .Config.password }}","sort1":"Size","sort1Direction":"Descending","sort2":"Relevance","sort2Direction":"Descending","sort3":"Date%20&%20Time","sort3Direction":"Descending"%7D/stream/series/{{ if .Query.IMDBID }}{{ .Query.IMDBID }}{{ else }}{{ .Config.validate_imdb_tv }}{{ end }}:{{ if .Query.Season }}{{ .Query.Season }}{{ else }}1{{ end }}:{{ if .Query.Ep }}{{ .Query.Ep }}{{ else }}1{{ end }}.json
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      categories: [TV]

  rows:
    selector: streams
    missingAttributeEqualsNoResults: true

  fields:
    title:
      selector: description
      filters:
        - name: split
          args: ["\n", 0]
        - name: regexp
          args: ['(.*)\.[^.]+$', '\1']
    year:
      selector: description
      filters:
        - name: regexp
          args: "(\\b(19|20)\\d{2}\\b)"
    category_is_tv_show:
      text: "{{ .Result.title }}"
      filters:
        - name: regexp
          args: "(?i)\\b([Ss]?\\d+[xXeE]\\d+)\\b"
    category:
      text: "{{ if .Result.category_is_tv_show }}TV{{ else }}Movies{{ end }}"
    download: 
      text: "{{ .Config.fakefileurl }}/{{ .Result.title }}.torrent"
    size:
      selector: behaviorHints.videoSize 
    quality:
      selector: name
      filters:
        - name: regexp
          args: "\\b(2160p|1080p|720p|480p)\\b"
    date:
      selector: description
      filters:
        - name: regexp
          args: "ðŸ•›\\s*(\\d+)h:(\\d+)m:(\\d+)s"
        - name: replace
          args: ["$1:$2:$3", "now-$1h$2m$3s"]
        - name: timeago
    seeders:
      text: "30"
    leechers:
      text: "0"